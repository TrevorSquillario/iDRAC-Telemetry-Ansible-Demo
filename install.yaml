- hosts: localhost
  connection: local
  name: Generate Docker Compose
  gather_facts: False
  become: no
  vars_files:
  - vault.yaml
  - install.vars.yaml
  roles:
  - role: docker-compose-generate
    vars:
      enable_ml_pump: True
    tags: 
      - generate

- hosts: idrac
  connection: local
  name: iDRAC Configure Telemetry
  gather_facts: False
  vars_files:
  - vault.yaml
  roles:
  - role: idrac-setup
    vars:
      idrac_attributes: 
        # Enable Telemetry Globally
        Telemetry.1.EnableTelemetry: "Enabled"
        # Enable individual Metric Reports
        TelemetryCPUSensor.1.EnableTelemetry: "Enabled"
        TelemetryFanSensor.1.EnableTelemetry: "Enabled"
        TelemetryMemoryMetrics.1.EnableTelemetry: "Enabled"
        TelemetryMemorySensor.1.EnableTelemetry: "Enabled"
        TelemetryNICSensor.1.EnableTelemetry: "Enabled"
        TelemetryNICStatistics.1.EnableTelemetry: "Enabled"
        TelemetryPowerMetrics.1.EnableTelemetry: "Enabled"
        TelemetryPSUMetrics.1.EnableTelemetry: "Enabled"
        TelemetrySensor.1.EnableTelemetry: "Enabled"
        TelemetrySFPTransceiver.1.EnableTelemetry: "Enabled"
        TelemetryStorageDiskSMARTData.1.EnableTelemetry: "Enabled"
        TelemetryStorageSensor.1.EnableTelemetry: "Enabled"
        TelemetrySystemUsage.1.EnableTelemetry: "Enabled"
        TelemetryThermalMetrics.1.EnableTelemetry: "Enabled"
        TelemetryThermalSensor.1.EnableTelemetry: "Enabled"
        TelemetryGPUMetrics.1.EnableTelemetry: "Enabled"
        TelemetryGPUStatistics.1.EnableTelemetry: "Enabled"
        # Set device poll frequency in seconds (when the metric is read from device)
        #TelemetryCPUSensor.1.DevicePollFrequency: 60
        #TelemetryFanSensor.1.DevicePollFrequency: 60
        #TelemetryMemoryMetrics.1.DevicePollFrequency: 60
        #TelemetryMemorySensor.1.DevicePollFrequency: 60
        #TelemetryNICSensor.1.DevicePollFrequency: 60
        #TelemetryNICStatistics.1.DevicePollFrequency: 60
        #TelemetryPowerMetrics.1.DevicePollFrequency: 60
        #TelemetryPSUMetrics.1.DevicePollFrequency: 60
        #TelemetrySensor.1.DevicePollFrequency: 60
        #TelemetrySFPTransceiver.1.DevicePollFrequency: 60
        #TelemetryStorageDiskSMARTData.1.DevicePollFrequency: 60
        #TelemetryStorageSensor.1.DevicePollFrequency: 60
        #TelemetrySystemUsage.1.DevicePollFrequency: 60
        #TelemetryThermalMetrics.1.DevicePollFrequency: 60
        #TelemetryThermalSensor.1.DevicePollFrequency: 60
        # Set report interval in seconds (when the report is generated/sent)
        #TelemetryCPUSensor.1.ReportInterval: 300
        #TelemetryFanSensor.1.ReportInterval: 300
        #TelemetryMemoryMetrics.1.ReportInterval: 300
        #TelemetryMemorySensor.1.ReportInterval: 300
        #TelemetryNICSensor.1.ReportInterval: 300
        #TelemetryNICStatistics.1.ReportInterval: 300
        #TelemetryPowerMetrics.1.ReportInterval: 300
        #TelemetryPSUMetrics.1.ReportInterval: 300
        #TelemetrySensor.1.ReportInterval: 300
        #TelemetrySFPTransceiver.1.ReportInterval: 300
        #TelemetryStorageDiskSMARTData.1.ReportInterval: 300
        #TelemetryStorageSensor.1.ReportInterval: 300
        #TelemetrySystemUsage.1.ReportInterval: 300
        #TelemetryThermalMetrics.1.ReportInterval: 300
        #TelemetryThermalSensor.1.ReportInterval: 300
        # Enable Redfish Alerts (Events)
        RedfishEventing.1.EventEnable: "Enabled"
        # Setup NTP and Timezone so the time will be set properly, otherwise data might appear "missing" when really it's just time shifted
        NTPConfigGroup.1.NTPEnable: "Enabled"
        NTPConfigGroup.1.NTP1: "time-a-g.nist.gov"
        Time.1.Timezone: "US/Central"
    tags: 
      - idrac-setup

- hosts: localhost
  connection: local
  name: Start Docker Compose
  gather_facts: False
  become: no
  vars_files:
  - vault.yaml
  - docker-compose/.env
  - install.vars.yaml
  roles:
  - role: docker-compose-start
    vars:
    tags: 
      - start