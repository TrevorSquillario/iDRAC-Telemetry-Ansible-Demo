---
# tasks file for docker-compose-start
- name: Start docker compose
  community.docker.docker_compose_v2:
    project_src: "{{ playbook_dir }}/docker-compose"
  register: output
  tags:
  - docker-start

- name: Show results
  ansible.builtin.debug:
    var: output
  tags:
  - docker-start

- name: Grafana API Ready
  uri:
    url: "{{GRAFANA_URL}}/api/admin/stats"
    return_content: yes
    validate_certs: no
    status_code:
      - 200
    force_basic_auth: true
    user: "{{ GRAFANA_ADMIN_USER }}"
    password: "{{ GRAFANA_ADMIN_PASSWORD }}"
  until: grafana_status_output.status == 200
  retries: 5
  delay: 1
  register: grafana_status_output
  tags:
  - grafana-setup

- name: Grafana - Get API Key # You can only create an API key once so you must save it
  uri:
    url: "{{ GRAFANA_URL }}/api/auth/keys"
    return_content: yes
    validate_certs: no
    status_code:
      - 200
    force_basic_auth: true
    user: "{{ GRAFANA_ADMIN_USER }}"
    password: "{{ GRAFANA_ADMIN_PASSWORD }}"
    method: POST
    body_format: json
    body: 
      name: "AdminAPIKey"
      role: "Admin"
  register: grafana_api_key_output
  when: GRAFANA_API_KEY == None
  tags:
  - grafana-setup

- name: Set Grafana API Key Fact
  ansible.builtin.set_fact:
    grafana_api_key: "{{ grafana_api_key_output.json.key }}"
  when: GRAFANA_API_KEY == None
  tags:
  - grafana-setup

- name: Set Grafana API Key Fact From .env
  ansible.builtin.set_fact:
    grafana_api_key: "{{ GRAFANA_API_KEY }}"
  when: GRAFANA_API_KEY != None
  tags:
  - grafana-setup

- name: Update .env
  lineinfile:
    dest: "{{playbook_dir}}/docker-compose/.env"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  loop:
    - regexp: "^GRAFANA_API_KEY:.*"
      line: "GRAFANA_API_KEY: {{ grafana_api_key }}"
  when: GRAFANA_API_KEY == None
  tags:
  - grafana-setup

- name: Include InfluxDB Tasks
  ansible.builtin.include_tasks:
    file: influx.yml
    apply:
      tags:
        - influx
  when: enable_influx

- name: Include Prometheus Tasks
  ansible.builtin.include_tasks:
    file: prometheus.yml
    apply:
      tags:
        - prometheus
  when: enable_prometheus

- name: Start docker compose
  community.docker.docker_compose_v2:
    project_src: "{{ playbook_dir }}/docker-compose"
    recreate: always
  register: output
  tags:
  - docker-start

#- name: Restart containers
#  community.docker.docker_container:
#    name: "{{ item }}"
#    image: "{{ item }}:latest"
#    state: started
#    restart: true
#  loop:
#    - simpledisc
#    - simpleauth
#    - redfishread
#    - influxpump
#  tags:
#    - ini